require 'cudnn'
local model = {}
table.insert(model, {'conv1', cudnn.SpatialConvolution(3, 16, 3, 3, 2, 2, 1, 1, 1)})
table.insert(model, {'conv1_relu', cudnn.ReLU(true)})
table.insert(model, {'pool2', cudnn.SpatialAveragePooling(2, 2, 2, 2, 0, 0):ceil()})
table.insert(model, {'conv2a1', cudnn.SpatialConvolution(16, 16, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'conv2a1_relu', cudnn.ReLU(true)})
-- warning: module 'conv2a1_conv2a1_relu_0_split [type Split]' not found
table.insert(model, {'conv2a2', cudnn.SpatialConvolution(16, 8, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'conv2a2_relu', cudnn.ReLU(true)})
-- warning: module 'conv2a2_conv2a2_relu_0_split [type Split]' not found
table.insert(model, {'conv2a3', cudnn.SpatialConvolution(8, 4, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'conv2a3_relu', cudnn.ReLU(true)})
-- warning: module 'conv2a3_conv2a3_relu_0_split [type Split]' not found
table.insert(model, {'conv2a4', cudnn.SpatialConvolution(4, 4, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'conv2a4_relu', cudnn.ReLU(true)})
-- warning: module '2a/output [type Concat]' not found
table.insert(model, {'conv2a_strided', cudnn.SpatialConvolution(32, 32, 3, 3, 2, 2, 1, 1, 1)})
table.insert(model, {'conv2a_strided_relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv3', cudnn.SpatialConvolution(32, 32, 3, 3, 2, 2, 1, 1, 1)})
table.insert(model, {'lane_conv3/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv4', cudnn.SpatialConvolution(32, 32, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv4/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv6', cudnn.SpatialConvolution(32, 64, 3, 3, 2, 2, 1, 1, 1)})
table.insert(model, {'lane_conv6/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv8', cudnn.SpatialConvolution(64, 64, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv8/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv9', cudnn.SpatialConvolution(64, 128, 3, 3, 2, 2, 1, 1, 1)})
table.insert(model, {'lane_conv9/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_1', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_1/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_2', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_2/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_3', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_3/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_4', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_4/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_5', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_5/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_6', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_6/relu', cudnn.ReLU(true)})
-- warning: module 'lane_conv11_6_lane_conv11_6/relu_0_split [type Split]' not found
table.insert(model, {'lane_conv11_7', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_7/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_8', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_8/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_conv11_9', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv11_9/relu', cudnn.ReLU(true)})
-- warning: module 'lane_conv11_zoom [type Interp]' not found
table.insert(model, {'lane_conv12', cudnn.SpatialConvolution(128, 16, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv12/relu', cudnn.ReLU(true)})
-- warning: module 'lane_conv12_zoom [type Interp]' not found
table.insert(model, {'lane_conv13', cudnn.SpatialConvolution(16, 8, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_conv13/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_fc_1x1', cudnn.SpatialConvolution(8, 5, 1, 1, 1, 1, 0, 0, 1)})
table.insert(model, {'lane_free_conv11_7', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_free_conv11_7/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_free_conv11_8', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_free_conv11_8/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_free_conv11_9', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_free_conv11_9/relu', cudnn.ReLU(true)})
-- warning: module 'lane_free_conv11_zoom [type Interp]' not found
table.insert(model, {'lane_free_conv12', cudnn.SpatialConvolution(128, 16, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_free_conv12/relu', cudnn.ReLU(true)})
-- warning: module 'lane_free_conv12_zoom [type Interp]' not found
table.insert(model, {'lane_free_conv13', cudnn.SpatialConvolution(16, 8, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_free_conv13/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_category_conv11_7', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_category_conv11_7/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_category_conv11_8', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_category_conv11_8/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_category_conv11_9', cudnn.SpatialConvolution(128, 128, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_category_conv11_9/relu', cudnn.ReLU(true)})
-- warning: module 'lane_category_conv11_zoom [type Interp]' not found
table.insert(model, {'lane_category_conv12', cudnn.SpatialConvolution(128, 16, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_category_conv12/relu', cudnn.ReLU(true)})
-- warning: module 'lane_category_conv12_zoom [type Interp]' not found
table.insert(model, {'lane_category_conv13', cudnn.SpatialConvolution(16, 8, 3, 3, 1, 1, 1, 1, 1)})
table.insert(model, {'lane_category_conv13/relu', cudnn.ReLU(true)})
table.insert(model, {'lane_category_fc_1x1', cudnn.SpatialConvolution(8, 16, 1, 1, 1, 1, 0, 0, 1)})
table.insert(model, {'lane_free_fc_1x1', cudnn.SpatialConvolution(8, 2, 1, 1, 1, 1, 0, 0, 1)})
return model